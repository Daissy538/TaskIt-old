<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TaskItApi</name>
    </assembly>
    <members>
        <member name="M:TaskItApi.Controllers.DefaultsController.GetColors">
            <summary>
            Returns all default colors
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.DefaultsController.GetIcons">
            <summary>
            Returns all default colors
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.GroupController.Create(TaskItApi.Dtos.GroupIncomingDTO)">
            <summary>
            Create a group and returns all subscribed groups of user.
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.GroupController.Delete(System.Int32)">
            <summary>
            Delete a group and returns all subscribed groups of user.
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.GroupController.Update(System.Int32,TaskItApi.Dtos.GroupIncomingDTO)">
            <summary>
            Create a group and returns all subscribed groups of user.
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.GroupController.GetGroups">
            <summary>
            Returns all subscribed groups of user.
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.GroupController.GetGroup(System.Int32)">
            <summary>
            Return group details based on id
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.UserController.Register(TaskItApi.Dtos.UserInComingDto)">
            <summary>
            Register a new account to the system.
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.UserController.Authenticate(TaskItApi.Dtos.UserInComingDto)">
            <summary>
            Authenicate user with a JWT token
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.UserController.Update(System.Int32)">
            <summary>
            Updat the given user account
            </summary>
        </member>
        <member name="M:TaskItApi.Controllers.UserController.Delete(System.Int32)">
            <summary>
            Delete the given user
            </summary>
            <returns></returns>
        </member>
        <member name="T:TaskItApi.Dtos.GroupIncomingDTO">
            <summary>
            The incoming data of a group
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupIncomingDTO.Name">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupIncomingDTO.Description">
            <summary>
            The description of the group
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupIncomingDTO.IconID">
            <summary>
            The id of the icon
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupIncomingDTO.ColorID">
            <summary>
            The id of the color
            </summary>
        </member>
        <member name="T:TaskItApi.Dtos.GroupOutgoingDTO">
            <summary>
            The outgoing group data
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupOutgoingDTO.ID">
            <summary>
            The unique database id
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupOutgoingDTO.Name">
            <summary>
            The name of the group
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupOutgoingDTO.Description">
            <summary>
            The description of the group
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupOutgoingDTO.IconValue">
            <summary>
            The icon value
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupOutgoingDTO.IconName">
            <summary>
            The icon name that the user will see
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupOutgoingDTO.ColorValue">
            <summary>
            The color value
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.GroupOutgoingDTO.ColorName">
            <summary>
            The color name that the user will see
            </summary>
        </member>
        <member name="F:TaskItApi.Dtos.GroupOutgoingDTO.Members">
            <summary>
            The member that are subscribed on the group
            </summary>
        </member>
        <member name="T:TaskItApi.Dtos.SubscriptionOutgoingDto">
            <summary>
            The subscription of a user to a group
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.SubscriptionOutgoingDto.UserID">
            <summary>
            The id of the subscribed user
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.SubscriptionOutgoingDto.UserName">
            <summary>
            The name of the subscribed user
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.SubscriptionOutgoingDto.GroupID">
            <summary>
            The group id where the user is subscribed to
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.SubscriptionOutgoingDto.GroupName">
            <summary>
            The group name where the user is subscribed to
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.SubscriptionOutgoingDto.DateOfSubscription">
            <summary>
            The data of the subscription
            </summary>
        </member>
        <member name="T:TaskItApi.Dtos.UserInComingDto">
            <summary>
            Used only for incoming calls at the controller
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.UserInComingDto.Email">
            <summary>
            The unique email of the user
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.UserInComingDto.Name">
            <summary>
            The nickname that is visable on TaskIt
            </summary>
        </member>
        <member name="P:TaskItApi.Dtos.UserInComingDto.Password">
            <summary>
            The password that is used
            </summary>
        </member>
        <member name="T:TaskItApi.Dtos.UserOutGoingDto">
            <summary>
            User information that can be returned to the frontend.
            </summary>
        </member>
        <member name="T:TaskItApi.Entities.Color">
            <summary>
            The color of a group icon.
            This database table will be automated seeded
            </summary>
        </member>
        <member name="T:TaskItApi.Entities.Group">
            <summary>
            A group of people that want to devide tasks.
            For example a houshold, company or society
            </summary>
        </member>
        <member name="T:TaskItApi.Entities.Icon">
            <summary>
            The Icon of a group.
            This database table will be automated seeded
            </summary>
        </member>
        <member name="T:TaskItApi.Entities.Subscription">
            <summary>
            A user can subscribed to a group.
            </summary>
        </member>
        <member name="T:TaskItApi.Entities.User">
            <summary>
            User of the TaskItApplication can register to multiple groups.
            </summary>
        </member>
        <member name="M:TaskItApi.Extentions.ClaimExtension.GetCurrentUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get the user id from the ClaimsPrincipal
            </summary>
            <param name="user">The claimPrincinpal that repecence the active user</param>
            <returns>THe user id</returns>
        </member>
        <member name="T:TaskItApi.Models.UnitOfWork">
            <summary>
            Used the repository and Unit of Work patterns to centralise database actions.
            So that multiple repositories can be used in one service.
            After writing all the request call the Complete function. Then all the request in the dbContext instance memory will be executed.
            To remove all the allocated resources of the dbContext call the dispose function.
            </summary>
        </member>
        <member name="M:TaskItApi.Models.UnitOfWork.SaveChanges">
            <summary>
            Save changes that where made in the dbContext memory to the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TaskItApi.Models.UnitOfWork.Dispose">
            <summary>
            Release all the allocated resources of the dbContext.
            </summary>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IColorRepository.GetAllColors">
            <summary>
            Get all default colors
            </summary>
            <returns>List of colors</returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IColorRepository.GetColorByValue(System.Int32)">
            <summary>
            Get 
            </summary>
            <param name="colorID"></param>
            <returns></returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IGroupRepository.FindAllGroupOfUser(System.Int32)">
            <summary>
            Find all the groups where the user is subscribed on
            </summary>
            <param name="userId">The id of the user</param>
            <returns>The subscribed groups</returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IGroupRepository.FindGroupOfUser(System.Int32,System.Int32)">
            <summary>
            Find a group by id for where the active user is subscribed on
            </summary>
            <param name="groupId">The group id</param>
            <param name="userId">The active user id</param>
            <returns>Returns the group if the user is subscribed on it</returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IIconRepository.GetAllIcons">
            <summary>
            Get all default icon
            </summary>
            <returns>List of icons</returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IIconRepository.GetIconByValue(System.Int32)">
            <summary>
            Get icon by value
            </summary>
            <param name="iconID"></param>
            <returns>the icon based on the given value</returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IRepositoryBase`1.FindAll">
            <summary>
            Retrieve all objects
            </summary>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IRepositoryBase`1.FindByCondition(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Retrieve all ibjects by condition
            </summary>
            <param name="expression">Given link expression</param>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IRepositoryBase`1.Create(`0)">
            <summary>
            Create a database object of entity
            </summary>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IRepositoryBase`1.Update(`0)">
            <summary>
            Update a database object of entity
            </summary>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IRepositoryBase`1.Delete(`0)">
            <summary>
            Delete a database object of entity
            </summary>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IUserRepository.AddUser(TaskItApi.Entities.User)">
            <summary>
            Add user to the database only when the email doesn't already exist
            </summary>
            <param name="user">The user to be added</param>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IUserRepository.GetUser(System.String)">
            <summary>
            Get user based on email
            </summary>
            <param name="email">The given user</param>
            <returns>The user. Returns null if the user doesn't exist.</returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IUserRepository.GetUser(System.Int32)">
            <summary>
            Get user bases on Id
            </summary>
            <param name="id">The id of the user</param>
            <returns>The user. Returns null if the user doesn't exist.</returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IUserRepository.ContainceUser(System.Int32)">
            <summary>
            Check if user exist
            </summary>
            <param name="id">the user id</param>
            <returns>true if the user exist, false otherwise</returns>
        </member>
        <member name="M:TaskItApi.Repositories.Interfaces.IUserRepository.ContainceUser(System.String)">
            <summary>
            Check if user exist
            </summary>
            <param name="email">the user email</param>
            <returns>true if the user exist, false otherwise</returns>
        </member>
        <member name="M:TaskItApi.Services.AuthenticationService.CreatePasswordHash(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Hash the user password based on the password and a salt.
            </summary>
            <param name="password">the password of the user</param>
            <param name="passwordHash">the hashed password</param>
            <param name="passwordSalt">the password salt</param>
        </member>
        <member name="M:TaskItApi.Services.AuthenticationService.VerifyPasswordHash(System.String,System.Byte[],System.Byte[])">
            <summary>
            Verify the password of the incoming user with the user from the database.
            </summary>
            <param name="password">incoming password</param>
            <param name="passwordHash">hashed password in database</param>
            <param name="passwordSalt">satl in database</param>
            <returns>Return true if it is a match, return false if it isn't</returns>
        </member>
        <member name="M:TaskItApi.Services.AuthenticationService.CreateToken(TaskItApi.Entities.User)">
            <summary>
            Create authentication token voor given user
            </summary>
            <param name="user">The user that want to login</param>
            <returns>The created token</returns>
        </member>
        <member name="M:TaskItApi.Services.DefaultService.GetAllColors">
            <summary>
            Get all default colors
            </summary>
            <returns>List of colors</returns>
        </member>
        <member name="M:TaskItApi.Services.DefaultService.GetAllIcons">
            <summary>
            Get all the default icons
            </summary>
            <returns>List of icons</returns>
        </member>
        <member name="M:TaskItApi.Services.GroupService.RetrieveGroupById(System.Int32,System.Int32)">
            <summary>
            Get group based on the groupId. If the user is subscribed on it
            </summary>
            <param name="groupId">The group id</param>
            <param name="userId">The active user</param>
            <returns>the group, null if the group doesn't exist or the user is not a subscriber</returns>
        </member>
        <member name="M:TaskItApi.Services.GroupService.UserExist(System.Int32)">
            <summary>
            Check if the user exist
            </summary>
            <param name="userId">the active user id</param>
            <returns>true if the user exist, false otherwise</returns>
        </member>
        <member name="T:TaskItApi.Services.Interfaces.IAuthenticationService">
            <summary>
            Interface for authenication
            </summary>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IAuthenticationService.AuthenicateUser(TaskItApi.Dtos.UserInComingDto)">
            <summary>
            Authenticate User based on Incomingdata.
            On succes it will return a JWT string.
            </summary>
            <param name="userIncomingData">The incoming user data</param>
            <returns>Authentication token for the given user</returns>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IAuthenticationService.RegisterUser(TaskItApi.Dtos.UserInComingDto)">
            <summary>
            Register user based on incomingdata
            </summary>
            <param name="userInComingDto">The new user data</param>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IAuthenticationService.UserExist(TaskItApi.Dtos.UserInComingDto)">
            <summary>
            Check if the user exist
            </summary>
            <param name="userInComingDto"></param>
        </member>
        <member name="T:TaskItApi.Services.Interfaces.IDefaultService">
            <summary>
            Service for default values that can be  used by the api clients
            </summary>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IDefaultService.GetAllColors">
            <summary>
            Get all default colors
            </summary>
            <returns>List of colors</returns>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IDefaultService.GetAllIcons">
            <summary>
            Get all the default icons
            </summary>
            <returns>List of icons</returns>
        </member>
        <member name="T:TaskItApi.Services.Interfaces.IGroupService">
            <summary>
            Interface for managing groups
            </summary>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IGroupService.Create(TaskItApi.Dtos.GroupIncomingDTO,System.Int32)">
            <summary>
            Create a group by an user
            </summary>
            <param name="newgroup">The group details</param>
            <param name="userId">The user that create the group</param>
            <returns>The current subscripted groups of the user</returns>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IGroupService.Delete(System.Int32,System.Int32)">
            <summary>
            Delete a group by group id
            </summary>
            <param name="groupId">The id of the group</param>
            <param name="userId">The user that delete the group</param>
            <returns>The current subscripted groups of the user</returns>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IGroupService.GetGroups(System.Int32)">
            <summary>
            Get the all the groups where the user is subscribed on
            </summary>
            <param name="userId">The active user</param>
            <returns>The subscribed groups of the user</returns>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IGroupService.GetGroup(System.Int32,System.Int32)">
            <summary>
            Get group details based on the groupId. If the user is subscribed on
            </summary>
            <param name="groupId">The group id</param>
            <param name="userId">The active user</param>
            <returns>the group, null if the group doesn't exist or the user is not a subscriber</returns>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IGroupService.Update(System.Int32,TaskItApi.Dtos.GroupIncomingDTO,System.Int32)">
            <summary>
            Update the selected groupd
            </summary>
            <param name="groupId">The group to be updated</param>
            <param name="newGroupData">the updated group data</param>
            <param name="userId">the user that requested the update</param>
            <returns></returns>
        </member>
        <member name="T:TaskItApi.Services.Interfaces.IUserService">
            <summary>
            Interface for managing the users
            </summary>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IUserService.DeleteUser(System.Int32)">
            <summary>
            Delete user by userId
            </summary>
            <param name="Id">the user Id</param>
            <returns></returns>
        </member>
        <member name="M:TaskItApi.Services.Interfaces.IUserService.UpdateUser(System.Int32,TaskItApi.Dtos.UserInComingDto)">
            <summary>
            Update the user with the given user Id
            </summary>
            <param name="Id">the user to be updated</param>
            <param name="changedUserInComingData">The changed data</param>
        </member>
        <member name="T:TaskItApi.Services.UserService">
            <summary>
            Managing users and authenication
            </summary>
        </member>
    </members>
</doc>
